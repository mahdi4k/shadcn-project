import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { NextIntlClientProvider, useMessages, hasLocale } from "next-intl";
import { notFound } from "next/navigation";

import "../globals.css";
import DirectionWrapper from "@/components/direction-wrapper";
import { ThemeProvider } from "@/components/theme-provider";
import AppHydrationLoader from "@/components/app-hydration-loader";
import { routing } from "@/i18n/routing"; // contains locales like ['en', 'fa', 'ar']

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

type Props = {
  children: React.ReactNode;
  params: { locale: string };
};

export default async function LocaleLayout({ children, params }: {
  children: React.ReactNode;
  params: Promise<{ locale: string }>; // ðŸ”¥ params is a Promise!
}) {
  const { locale } = await params; // âœ… await it

  const messages = await import(`@/messages/${locale}.json`).then((mod) => mod.default);
  console.log("ðŸš€ ~ LocaleLayout ~ messages:", messages)
 const initialDir = locale === "fa" ? "rtl" : "ltr";
  return (
    <html lang={locale} suppressHydrationWarning>
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <NextIntlClientProvider locale={locale} messages={messages}>
          <DirectionWrapper initialDir={initialDir}>
            <ThemeProvider attribute="class" defaultTheme="system" enableSystem disableTransitionOnChange>
              <AppHydrationLoader>{children}</AppHydrationLoader>
            </ThemeProvider>
          </DirectionWrapper>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
